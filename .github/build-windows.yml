name: release
on:
  push:
    branches: [ features/release-actions ]
#  release:
#    types: [created]
jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-20.04, windows-2019]
        python-version: [ '3.8' ]
    steps:
      - uses: actions/cache@v2
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-2019' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/cache@v2
        if: ${{ matrix.os == 'macos-10.15' }}
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          architecture: x64
          python-version: ${{ matrix.python-version }}
      - uses: actions/setup-java@v1
        name: Install Java
        with:
          java-version: '14.0.1' # The JDK version to make available on the path.
          java-package: jdk
          architecture: x64
      - name: Clone repos
        run: |
          pip install --upgrade pip setuptools wheel
          pip install numpy
          git clone https://github.com/CellProfiler/distribution.git
          git clone https://github.com/CellProfiler/pyinstaller.git
      - run: pip install --editable .
        name: Install Pyintaller
        working-directory: pyinstaller
      - env:
          LDFLAGS: -L/usr/local/opt/openssl/lib
        if: ${{ matrix.os == 'macos-10.15' }}
        name: Package for Mac
        run: |
          brew install mysql
          make
        working-directory: ./distribution/macos
      - if: ${{ matrix.os == 'ubuntu-20.04' }}
        name: Package for Linux
        run: echo
      - if: ${{ matrix.os == 'windows-2019' }}
        name: Install Windows dependencies
        run: |
          pip install cython
          pip install mysqlclient==1.4.6
          pip install -e .
        env:
          JDK_HOME: C:\hostedtoolcache\windows\jdk\14.0.1\x64
      - if: ${{ matrix.os == 'windows-2019' }}
        name: Package for Windows
        run: |
          pyinstaller distribution/windows/cellprofiler.spec
          iscc /dMyAppVersion="4.0.0rc5" "distribution/windows/cellprofiler.iss"
      - name: Create Release
        if: ${{ matrix.os == 'windows-2019' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload Release Asset
        if: ${{ matrix.os == 'windows-2019' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./distribution/windows/Output/CellProfiler.exe
          asset_name: CellProfiler.exe
          asset_content_type: application/exe