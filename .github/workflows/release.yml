name: Create CellProfiler Releases
jobs:
  build-cp:
    name: Build CellProfiler
    strategy:
      matrix:
        os: [macos-latest, windows-2019]
        python-version: ["3.9"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Windows - Cache pip
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v2
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Mac - Cache pip
        if: startsWith(matrix.os, 'macos')
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # need to get git tags for setuptools-scm
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          architecture: x64
          python-version: ${{ matrix.python-version }}
      - name: Get CellProfiler Version - Mac
        if: startsWith(matrix.os, 'macos')
        id: get-cp-version-mac
        run: |
          pip install --upgrade "setuptools>=64.0.0" "setuptools-scm>=8.0"
          # reference with ${{ env.CP_VERSION }}
          echo "CP_VERSION=$(python -m setuptools_scm -c ${{ github.workspace }}/src/frontend/pyproject.toml)"
          echo "CP_VERSION=$(python -m setuptools_scm -c ${{ github.workspace }}/src/frontend/pyproject.toml)" >> "$GITHUB_ENV"
      - name: Get CellProfiler Version - Windows
        if: startsWith(matrix.os, 'windows')
        id: get-cp-version-windows
        run: |
          pip install --upgrade "setuptools>=64.0.0" "setuptools-scm>=8.0"
          # reference with ${{ env.CP_VERSION }}
          echo "CP_VERSION=$(python -m setuptools_scm -c ${{ github.workspace }}/src/frontend/pyproject.toml)"
          echo "CP_VERSION=$(python -m setuptools_scm -c ${{ github.workspace }}/src/frontend/pyproject.toml)" >> $env:GITHUB_ENV
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11" # The JDK version to make available on the path.
          java-package: jdk
          architecture: x64
      - name: Mac - Build
        if: startsWith(matrix.os, 'macos')
        working-directory: ${{ github.workspace }}/distribution/macos
        env:
          LDFLAGS: -L/usr/local/opt/openssl/lib
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.BUILD_CERTIFICATE_BASE64_CIMINI }}
          CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD_CIMINI }}
        run: |
          brew install mysql
          make CP_VERSION=${{ env.CP_VERSION }} CP_BRANCH="" CP_DIR=${{ github.workspace }}
          chmod +x add-osx-certificate.sh && ./add-osx-certificate.sh
          chmod +x osx-codesign.sh && ./osx-codesign.sh
          ditto -ck --keepParent --rsrc --sequesterRsrc ./dist/CellProfiler.app ./dist/CellProfiler-macOS-${{ env.CP_VERSION }}.zip
      - name: Windows - Build
        if: startsWith(matrix.os, 'windows')
        env:
          JDK_HOME: ${{ env.JAVA_HOME }}
        # cython necessary? mysql?
        run: |
          pip install "cython" 
          pip install mysqlclient==2.0.3 #tbh, I suspect this is outside the pip install below because it's crashy and takes a long time, not for real reasons
          echo "Installing ${{ env.CP_VERSION }}..."
          pip install --editable "${{ github.workspace }}/src/subpackages/library" --upgrade
          pip install --editable "${{ github.workspace }}/src/subpackages/core" --upgrade
          pip install --editable "${{ github.workspace }}/src/frontend[build]" --upgrade
          pyinstaller ${{ github.workspace }}/distribution/windows/cellprofiler.spec
          # Tell the iss file where to find Java
          (Get-Content -Raw ${{ github.workspace }}/distribution/windows/cellprofiler.iss) -replace 'LOCAL_JDK_PATH_VAR', '"${{ env.JDK_HOME }}\*";' | Set-Content -NoNewLine ${{ github.workspace }}/distribution/windows/cellprofiler.iss
          iscc /dMyAppVersion="${{ env.CP_VERSION }}" "${{ github.workspace }}/distribution/windows/cellprofiler.iss"
      - name: Mac - Create Artifact
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v1
        with:
          name: CellProfiler-macOS-${{ env.CP_VERSION }}.zip
          path: ${{ github.workspace }}/distribution/macos/dist/CellProfiler-macOS-${{ env.CP_VERSION }}.zip
      - name: Windows - Create Artifact
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@v2
        with:
          name: CellProfiler-Windows-${{ env.CP_VERSION }}.exe
          path: ${{ github.workspace }}/distribution/windows/Output/CellProfiler-Windows-${{ env.CP_VERSION }}.exe

# TODO re-enable, make some condition for this to run
  # upload-cp:
  #   name: Upload CellProfiler
  #   needs: build-cp
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         # need to get git tags for setuptools-scm
  #         fetch-depth: 0
  #     - name: Create Release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       id: create_release
  #       uses: actions/create-release@v1
  #       with:
  #         draft: true
  #         prerelease: true
  #         release_name: ${{ github.ref }}
  #         tag_name: ${{ github.ref }}
  #     - name: Download Mac Artifact
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: CellProfiler-macOS-${{ env.CP_VERSION }}.zip
  #         path: ./
  #     - name: Download Windows Artifact
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: CellProfiler-Windows-${{ env.CP_VERSION }}.exe
  #         path: ./
  #     - name: Upload Mac Artifact
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       uses: actions/upload-release-asset@v1
  #       with:
  #         asset_content_type: application/zip
  #         asset_name: CellProfiler-macOS-${{ env.CP_VERSION }}.zip
  #         asset_path: /home/runner/work/CellProfiler/CellProfiler/CellProfiler-macOS-${{ env.CP_VERSION }}.zip
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #     - name: Upload Windows Artifact
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       uses: actions/upload-release-asset@v1
  #       with:
  #         asset_content_type: application/exe
  #         asset_name: CellProfiler-Windows-${{ env.CP_VERSION }}.exe
  #         asset_path: /home/runner/work/CellProfiler/CellProfiler/CellProfiler-Windows-${{ env.CP_VERSION }}.exe
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
on:
  pull_request:
    types: [synchronize]
  push:
    tags:
      - "v*"
  workflow_dispatch:
