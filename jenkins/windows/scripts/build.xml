<project
        name="build-cellprofiler"
        default="build">
    <property environment="env"/>
    <property name="project-root" value="${env.WORKSPACE}"/>
    <property name="git-root" value="${project-root}/CellProfiler"/>
    <property name="test-xslt"
              value="${git-root}/jenkins/windows/scripts/condense-xunit.xslt"/>
    <property name="mvn-exe" value="${env.MVN_PATH}"/>
    <condition property="compile-setup-dot-py"
               value="compile-setup-dot-py-amd64">
        <os family="windows" arch="AMD64"/>
    </condition>
    <condition property="compile-setup-dot-py"
               value="compile-setup-dot-py-x86">
        <os family="windows" arch="x86"/>
    </condition>
    <condition property="windows-redistributables-exist">
        <and>
            <available file="${git-root}/windows/vcredist_x64.exe"/>
            <available file="${git-root}/windows/vcredist_x86.exe"/>
        </and>
    </condition>
    <target name="build" depends="compile"/>
    <target name="clean-and-build">
        <antcall target="clean"/>
        <antcall target="windows-build"/>
        <antcall target="check-tests"/>
    </target>

    <target name="external-dependencies">
        <exec executable="python" failonerror="true" dir="${git-root}">
            <env key="MAVEN_OPTS" value="-Xmx1024m"/>
            <arg value="external_dependencies.py"/>
            <arg value="-o"/>
        </exec>
    </target>

    <target name="compile"
            depends="compile-cpmath, compile-utilities, external-dependencies"/>

    <target name="compile-setup-dot-py-amd64">
        <!-- Compiles setup.py in the directory, setup.py.dir -->
        <exec executable="python" failonerror="true"
              dir="${setup.py.dir}">
            <env key="DISTUTILS_USE_SDK" value="1"/>
            <env key="MSSdk" value="1"/>
            <arg value="setup.py"/>
            <arg value="build_ext"/>
            <arg value="-i"/>
        </exec>
    </target>
    <target name="compile-setup-dot-py-x86">
        <exec executable="python" failonerror="true"
              dir="${setup.py.dir}">
            <env key="DISTUTILS_USE_SDK" value="1"/>
            <env key="MSSdk" value="1"/>
            <arg value="setup.py"/>
            <arg value="build_ext"/>
            <arg value="-i"/>
        </exec>
    </target>
    <target name="compile-cpmath">
        <antcall target="${compile-setup-dot-py}">
            <param name="setup.py.dir" value="${git-root}/cellprofiler/cpmath"/>
        </antcall>
    </target>

    <target name="compile-utilities">
        <antcall target="${compile-setup-dot-py}">
            <param name="setup.py.dir"
                   value="${git-root}/cellprofiler/utilities"/>
        </antcall>
    </target>

    <target name="test" depends="check-tests,test-java"/>

    <target name="check-tests"
            depends="test-cellprofiler, test-modules, test-cpmath, test-manual, test-utilities">
        <xslt style="${test-xslt}"
              in="${project-root}/target/test-results/cellprofiler.xml"
              out="${project-root}/target/cellprofiler_failures.xml"/>
        <xslt style="${test-xslt}"
              in="${project-root}/target/test-results/cellprofiler_modules.xml"
              out="${project-root}/target/cellprofiler_modules_failures.xml"/>
        <xslt style="${test-xslt}"
              in="${project-root}/target/test-results/cellprofiler_cpmath.xml"
              out="${project-root}/target/cellprofiler_cpmath_failures.xml"/>
        <xslt style="${test-xslt}"
              in="${project-root}/target/test-results/cellprofiler_manual.xml"
              out="${project-root}/target/cellprofiler_manual_failures.xml"/>
        <xslt style="${test-xslt}"
              in="${project-root}/target/test-results/cellprofiler_utilities.xml"
              out="${project-root}/target/cellprofiler_utilities_failures.xml"/>
        <xmlproperty file="target/cellprofiler_failures.xml"/>
        <xmlproperty file="target/cellprofiler_modules_failures.xml"/>
        <xmlproperty file="target/cellprofiler_cpmath_failures.xml"/>
        <xmlproperty file="target/cellprofiler_matlab_failures.xml"/>
        <xmlproperty file="target/cellprofiler_utilities_failures.xml"/>
        <xmlproperty file="target/cellprofiler_manual_failures.xml"/>
        <fail if="testsuite.testcase.failure">
            Test ${testsuite.testcase.failure} failed. See log for more failures
            and details.
        </fail>
    </target>

    <target name="test-java" depends="external-dependencies">
        <exec executable="${mvn-exe}"
              failonerror="true"
              dir="${git-root}/java">
            <arg value="test"/>
        </exec>
    </target>

    <!--
        run-tests

        Parameters:
            ts-directory: directory holding the tests
            ts-pattern: search pattern for the tests
            ts-output-file: the name of the xunit file output by the test
    -->
    <condition property="ts-directory" value="${git-root}">
        <not>
            <isset property="ts-directory"/>
        </not>
    </condition>
    <condition property="ts-pattern" value="(:?^)test_.*">
        <not>
            <isset property="ts-pattern"/>
        </not>
    </condition>
    <target name="run-tests">
        <mkdir dir="${project-root}/target/test-results"/>
        <!--
            Collect tests
                output: xunit file at ../target/${ts-output-file}
        -->
        <exec executable="python" failonerror="true"
              dir="${git-root}">
            <env key="PYTHONPATH" path="${git-root}"/>
            <arg value="cpnose.py"/>
            <arg value="--collect-only"/>
            <arg value="--with-xunit"/>
            <arg value="--xunit-file=${project-root}/${ts-output-file}"/>
            <arg value="-m"/>
            <arg value="${ts-pattern}"/>
            <arg value="-w"/>
            <arg value="${ts-directory}"/>
        </exec>
        <!--
            Run tests
                output: xunit file at ../target/test-results/${ts-output-file}
        -->

        <exec executable="${git-root}/dist/cellprofiler.exe" failonerror="true"
              dir="${git-root}/dist">
            <arg value="--with-javabridge"/>
            <arg value="--no-headless"/>
            <arg value="--with-xunit"/>
            <arg value="--xunit-file=${project-root}/target/test-results/${ts-output-file}"/>
            <arg value="--xml-test-file=${project-root}/${ts-output-file}"/>
            <arg value="-v"/>
        </exec>
        <delete>
            <fileset dir="${project-root}/target">
                <include name="${ts-output-file}"/>
            </fileset>
        </delete>
    </target>

    <target name="test-modules" depends="windows-build">
        <antcall target="run-tests">
            <param name="ts-directory" value="cellprofiler/modules"/>
            <param name="ts-output-file" value="cellprofiler_modules.xml"/>
            <param name="ts-pattern" value="(:?^)test(s|_.*)"/>
        </antcall>
    </target>

    <target name="test-cpmath" depends="windows-build">
        <antcall target="run-tests">
            <param name="ts-directory" value="cellprofiler/cpmath"/>
            <param name="ts-output-file" value="cellprofiler_cpmath.xml"/>
        </antcall>
    </target>

    <target name="test-cellprofiler" depends="windows-build">
        <antcall target="run-tests">
            <param name="ts-directory" value="cellprofiler/tests"/>
            <param name="ts-output-file" value="cellprofiler.xml"/>
        </antcall>
    </target>

    <target name="test-gui" depends="windows-build">
        <antcall target="run-tests">
            <param name="ts-directory" value="cellprofiler/gui/tests"/>
            <param name="ts-output-file" value="cellprofiler_gui.xml"/>
        </antcall>
    </target>

    <target name="test-utilities" depends="windows-build">
        <antcall target="run-tests">
            <param name="ts-directory" value="cellprofiler/utilities/tests"/>
            <param name="ts-output-file" value="cellprofiler_utilities.xml"/>
        </antcall>
    </target>

    <target name="test-manual" depends="windows-build">
        <antcall target="run-tests">
            <param name="ts-directory" value="cellprofiler/gui/html/tests"/>
            <param name="ts-output-file" value="cellprofiler_manual.xml"/>
        </antcall>
    </target>


    <target name="windows-redistributables"
            unless="windows-redistributables-exist">
        <mkdir dir="${git-root}/windows"/>
        <exec executable="curl">
            <arg value="-o"/>
            <arg value="${git-root}/windows/vcredist_x64.exe"/>
            <arg value="http://download.microsoft.com/download/A/8/0/A80747C3-41BD-45DF-B505-E9710D2744E0/vcredist_x64.exe"/>
        </exec>
        <exec executable="curl">
            <arg value="-o"/>
            <arg value="${git-root}/windows/vcredist_x86.exe"/>
            <arg value="http://download.microsoft.com/download/5/B/C/5BC5DBB3-652D-4DCE-B14A-475AB85EEF6E/vcredist_x86.exe"/>
        </exec>
    </target>

    <target name="windows-build" depends="compile, windows-redistributables">
        <mkdir dir="${git-root}/output"/>
        <mkdir dir="target/output"/>
        <exec executable="python" failonerror="true" dir="${git-root}">
            <env key="PYTHONPATH" path="${git-root}"/>
            <arg value="windows_setup.py"/>
            <arg value="py2exe"/>
            <arg value="msi"/>
            <arg value="codesign"/>
        </exec>
        <delete>
            <fileset dir="target/output">
                <include name="*.exe"/>
            </fileset>
        </delete>
        <copy todir="target/output">
            <fileset dir="${git-root}/output">
                <include name="*.exe"/>
            </fileset>
        </copy>
    </target>

    <target name="clean" depends="clean-java">
        <delete dir="${git-root}/cellprofiler/utilities/build"/>
        <delete dir="${git-root}/contrib/build"/>
        <delete dir="${git-root}/cellprofiler/cpmath/build"/>
        <delete dir="${git-root}/output"/>
        <delete dir="${git-root}/build"/>
        <delete dir="${git-root}/dist"/>
        <delete dir="${git-root}/imagej/maven"/>
        <delete dir="${git-root}/imagej/jars"/>
        <delete file="${git-root}/imagej/apache-maven-3.0.4-bin.zip"/>
        <delete>
            <fileset dir="${git-root}">
                <include name="**/*.pyc"/>
                <include name="**/*.pyd"/>
                <include name="cellprofiler/cpmath/*.c"/>
                <include name="cellprofiler/utilities/*.c"/>
                <exclude
                        name="cellprofiler/utilities/get_proper_case_filename.c"/>
                <exclude name="cellprofiler/utilities/mac_javabridge_utils.c"/>
                <exclude name="cellprofiler/utilities/strtoull.c"/>
                <include name="contrib/LAP.c"/>
                <include name="cellprofiler/cpmath/*.so"/>
                <include name="cellprofiler/utilities/javabridge.so"/>
                <include name="contrib/LAP.so"/>
            </fileset>
        </delete>
    </target>
    <target name="clean-java">
        <exec executable="${mvn-exe}"
              failonerror="clean"
              dir="${git-root}/java">
            <arg value="test"/>
        </exec>
    </target>
</project>
