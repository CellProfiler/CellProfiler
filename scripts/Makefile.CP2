#
# Makefile for CellProfiler 2 prerequisites
#
#
# CellProfiler is distributed under the GNU General Public License.
# See the accompanying file LICENSE for details.
#
# Copyright (c) 2003-2009 Massachusetts Institute of Technology
# Copyright (c) 2009-2015 Broad Institute
# All rights reserved.
#
# Please see the AUTHORS file for credits.
#
# Website: http://www.cellprofiler.org
#
# WARNING: this Makefile is unlikely to work correctly for
# CellProfiler revisions much beyond the most recent update to the
# Makefile itself.
#
# This Makefile will download, unpack, compile and install all
# prerequisites for CP2, except for Java. It requires a fairly
# recent compiler (gcc) to compile ATLAS with optimal performance.
# Please disable CPU frequency scaling before compilation.
#
# PREREQUISITES:
# - It is recommended to have development files for GTK+. If you don't
#   have (or want) GTK+, you can compile with a less optimal user interface
#   using the WXUSEGTK="no" parameter for this Makefile.
#     RedHat:        yum install gtk2-devel
#     Debian/Ubuntu: aptitude install libgtk2.0-dev
#     Generic:       "make gtk" with this Makefile
#
# VARIABLES:
# - set PREFIX to where you want to install your CellProfiler2 directory
#   Ensure that JAVA_HOME points to your JDK
#   Define HOSTTYPE to be the processor type if not "amd64"
#
# USAGE:
# - always invoke 'make' with the name of this Makefile, i.e.:
#     make -f Makefile.CP2
# - supply variables that you want to set on the command line, i.e.:
#     make -f Makefile.CP2 PREFIX="$HOME/usr/CellProfiler2" ...
# - if you want to first download all sources, use the "download" target:
#     make -f Makefile.CP2 download
#
# After installation, you need to run the following every time
# you want to start CellProfiler (or place it in your SHELL
# startup scripts, e.g., ~/.bashrc for bash):
#   CP2DEST="$HOME/usr/CellProfiler2"
#   export PATH="${CP2DEST}/bin:${PATH}"
#   export LD_LIBRARY_PATH="${CP2DEST}/lib:${CP2DEST}/lib64:${LD_LIBRARY_PATH}":${CP2DEST}/lib/mysql
#   export PYTHONPATH="${CP2DEST}/lib/python2.5/site-packages:${PYTHONPATH}"
#   export JAVA_HOME="<your path to JDK or JRE>"
#
# and set your locale to use UTF-8 encoding, e.g.
#
#   export LC_ALL=en_US.UTF-8
#
# To run CellProfiler:
#   cd ${CP2DEST}
#   python CellProfiler.py -b
#
# To run Ilastik:
#   python -m ilastik.ilastikMain
#
# MAKE_FLAGS is used for "make" compilation. -jN specifies N parallel
# build jobs for packages that support parallel compilation. Change or
# add other parameters as you like:

PACKAGEHOST				?= http://cellprofiler.org/linux/SOURCES

MAKE_FLAGS				?= -j4
PREFIX					?= /usr/CellProfiler
SRCDIR					?= $(PREFIX)/src
TMPDIR					?= $(PWD)/tmp
HOSTTYPE				?=amd64
#
# TGTDIR holds the target files touched when making multipart dependencies
# The target directory must be present before the dependencies are calculated
# so it must be created in this backhanded fashion.
#
TGTDIR					?= $(TMPDIR)/targets
export MAKETGTDIRCMD := "mkdir -p "$(TGTDIR)";echo "$(TGTDIR)
VPATH = $(shell "$(MAKETGTDIRCMD)")
unexport MAKETGTDIRCMD

# Set DISABLE_PRECHECKS to "YES" (case sensitive!) to explicitly
# disable prechecks. Disabling is not recommended. It may lead
# to failed builds because of missing/wrong dependencies.
DISABLE_PRECHECKS			?= NO
WXUSEGTK				?= yes
WGETFLAGS				?= --continue --tries=10 --timeout=60 --no-check-certificate 

# Versions and prefixes of packages:
CELLPROFILERPREFIX			?= $(PREFIX)
CELLPROFILER_CO_URL			= https://github.com/CellProfiler/CellProfiler.git

PYVERSION				= 2.7
PYTHONVERSION				= Python-$(PYVERSION).2
PYTHONPREFIX				?= $(PREFIX)
PYTHON					= $(PYTHONPREFIX)/bin/python
SITEPKGPREFIX				= $(PYTHONPREFIX)/lib/python$(PYVERSION)/site-packages

AMDVERSION				= AMD-2.2.2
AMDURL					= $(PACKAGEHOST)
ATLASVERSION				= atlas3.11.8
ATLASPREFIX				?= /usr/lib64/atlas/ 
ATLASURL				= http://sourceforge.net/projects/math-atlas/files/
BIOFORMATSVERSION		= python-bioformats-1.0.4
BIOFORMATSURL			= $(PACKAGEHOST)
BOOSTVERSION				= boost_1_53_0
BOOSTPREFIX				?= $(PREFIX)
CAMDVERSION				= CAMD-2.2.2
CAMDPREFIX				?= $(PREFIX)
CAMDURL					= $(PACKAGEHOST)
CELLH5VERSION				= cellh5-1.2.0
CCOLAMDVERSION				= CCOLAMD-2.7.3
CCOLAMDPREFIX				?= $(PREFIX)
CCOLAMDURL				= $(PACKAGEHOST)
CHOLMODVERSION				= CHOLMOD-1.7.2
CHOLMODPREFIX				?= $(PREFIX)
CHOLMODURL				= $(PACKAGEHOST)
COLAMDVERSION				= COLAMD-2.7.3
COLAMDPREFIX				?= $(PREFIX)
COLAMDURL				= $(PACKAGEHOST)
CYTHONVERSION				= Cython-0.20.2
CYTHONPREFIX				?= $(PREFIX)
CYTHONURL				= $(PACKAGEHOST)#download
DATEUTILVERSION				= python-dateutil-2.2
DECORATORVERSION			= decorator-3.2.0
FFTWVERSION				= fftw-3.2.2
FFTWPREFIX				?= $(PREFIX)
HDF5VERSION				= hdf5-1.8.10-patch1
HDF5PREFIX				?= $(PREFIX)
H5PYVERSION				= h5py-2.2.0
H5PYPREFIX				?= $(PREFIX)
H5PYURL					= $(PACKAGEHOST)
ILASTIKMAJVERSION			= 0.5
ILASTIKMINVERSION			= 05
ILASTIKVERSION				= $(ILASTIKMAJVERSION).$(ILASTIKMINVERSION)
ILASTIKPREFIX				?= $(PREFIX)
ILASTIKURL				= $(PACKAGEHOST)
JAVABRIDGEVERSION             = javabridge-1.0.11
JAVABRIDGEURL		       = $(PACKAGEHOST)
JPEGVERSION				= 8b
JPEGPREFIX				?= $(PREFIX)
LAPACKVERSION				= lapack-3.3.0
LAPACKFLAGS				= -fPIC -m64
LAPACKURL				= http://www.netlib.org/lapack/
LXMLVERSION				= lxml-3.4.2
LIBXML2VERSION				= libxml2-2.9.2
LIBXSLTVERSION				= libxslt-1.1.28
LIBICONVVERSION				= libiconv-1.9.2
MATPLOTLIBVERSION			= matplotlib-1.0.1
MATPLOTLIBURL				= $(PACKAGEHOST)
MYSQLVERSION				= mysql-5.1.55
MYSQLPREFIX				?= $(PREFIX)
MYSQLURL				= $(PACKAGEHOST)
MYSQLPYTHONVERSION			= MySQL-python-1.2.3
MYSQLPYTHONURL				= $(PACKAGEHOST)
NCURSESVERSION				= ncurses-5.7
NCURSESPREFIX				?= $(PREFIX)
NUMPYVERSION				= numpy-1.9.0
NUMPYPREFIX				?= $(PREFIX)
NUMPYURL				= $(PACKAGEHOST)
PANDASVERSION				= pandas-0.16.0
PCREVERSION				= pcre-8.35
PCREPREFIX				?= $(PREFIX)
PCREURL					= $(PACKAGEHOST)
PILVERSION				= Imaging-1.1.7
PILPREFIX				?= $(PREFIX)
PILURL					= $(PACKAGEHOST)
#PNGVERSION				= libpng-1.4.5
#PNGPREFIX				?= $(PREFIX)
#PNGURL					= $(PACKAGEHOST)
PYOPENGLVERSION				= PyOpenGL-3.0.1
PYOPENGLPREFIX				?= $(PREFIX)
PYOPENGLURL				= http://pyopengl.sourceforge.net/documentation/installation.html
PYOPENGLACCELVERSION			= PyOpenGL-accelerate-3.0.1
PYOPENGLACCELPREFIX			?= $(PREFIX)
PYOPENGLACCELURL			= http://pyopengl.sourceforge.net/documentation/installation.html
PYPIVERSION				= setuptools-1.1.6
PYPIPREFIX				?= $(PREFIX)
PYQTVERSION				= PyQt-x11-gpl-4.8.3
PYQTPREFIX				?= $(PREFIX)
PYQTURL					= $(PACKAGEHOST)
PYSQLITEVERSION				= pysqlite-2.6.1
PYSQLITEPREFIX				?= $(PREFIX)
PYSQLITEURL				= $(PACKAGEHOST)
PYTHONNOSEVERSION			= nose-1.3.4
PYTHONNOSEURL				= $(PACKAGEHOST)
PYTZVERSION				= pytz-2013.7
PYZMQVERSION				= pyzmq-13.1.0
PYZMQURL					= $(PACKAGEHOST)
QIMGTOARRVERSION			= qimage2ndarray-1.0
QIMGTOARRPREFIX				?= $(PREFIX)
QIMGTOARRURL				= $(PACKAGEHOST)
QTVERSION				= qt-everywhere-opensource-src-4.7.1
QTMAKE					= $(PREFIX)/bin/qmake
SKLEARNVERSION				= scikit-learn-0.15.2
SCIPYVERSION				= scipy-0.10.1
SCIPYPREFIX				?= $(PREFIX)
SCIPYURL				= $(PACKAGEHOST)
SIPVERSION				= sip-4.12.1
SIPPREFIX				?= $(PREFIX)
SIPURL					= $(PACKAGEHOST)
SIXVERSION				= six-1.4.1
SQLITEVERSION				= sqlite-autoconf-3070500
SQLITEPREFIX				?= $(PREFIX)
SQLITEURL				= $(PACKAGEHOST)
SWIGVERSION				= swig-2.0.1
SWIGPREFIX				?= $(PREFIX)
SWIGURL					= $(PACKAGEHOST) 
TIFFVERSION				= tiff-3.9.4
TIFFPREFIX				?= $(PREFIX)
UFCONFIGVERSION				= UFconfig-3.6.0
UFCONFIGURL				= $(PACKAGEHOST)
UMFPACKVERSION				= UMFPACK-5.5.1
UMFPACKPREFIX				?= $(PREFIX)
UMFPACKURL				= $(PACKAGEHOST)
VIGRAVERSION				= vigra-1.7.1
VIGRAPREFIX				?= $(PREFIX)
VIGRAURL				= $(PACKAGEHOST)
WXVERSION				= 2.8.11
WXPYTHONTOOLKIT_no			= --without-gtk --disable-unicode --disable-gtktest --with-x11
WXPYTHONTOOLKIT_yes			= --with-gtk --enable-unicode
WXPYTHONVERSION				= 2.8.11.0
WXFLAGS					= --with-opengl --enable-graphics_ctx --enable-shared --disable-compat24 --enable-compat26 --disable-sound --enable-monolithic --with-libpng=sys --with-libjpeg --with-libtiff --with-zlib
WXPYTHONPREFIX				?= $(PREFIX)
WXPYTHONURL				= http://www.wxpython.org/download.php#sources
YATTAGVERSION				= yattag-1.5.0.tar.gz
ZLIBVERSION				= zlib-1.2.5
ZLIBPREFIX				?= $(PREFIX)

# optional packages:
GTKVERSION				= gtk+-2.22.1
GTKPREFIX				= $(PREFIX)
GLIBVERSION				= glib-2.26.1
GLIBPREFIX				= $(PREFIX)
PANGOVERSION				= pango-1.28.3
PANGOPREFIX				= $(PREFIX)
PIXMANVERSION				= pixman-0.20.2
PIXMANPREFIX				= $(PREFIX)
GDKPIXBUFVERSION			= gdk-pixbuf-2.22.1
GDKPIXBUFPREFIX				= $(PREFIX)
ATKVERSION				= atk-1.32.0
ATKPREFIX				= $(PREFIX)
CAIROVERSION				= cairo-1.10.2
CAIROPREFIX				= $(PREFIX)
FONTCFGVERSION				= fontconfig-2.8.0
FONTCFGPREFIX				= $(PREFIX)
GETTEXTPREFIX                           = $(PREFIX)
GETTEXTVERSION                          = gettext-0.18.1.1

DOLLAR                                  =\$$

default:				all
all:					precheck cellprofiler
gtk:					precheck libgtk

#Identify host type and set relevant variables
sethost:				
	@if echo $${HOSTTYPE} | grep -q 64; then \
		echo "using 64 bit version" ; \
	fi

#
# Here we have all the tests for prerequisites of this Makefile
# Add as many (useful) tests as you like, the more the better.
# They just need to perform quickly!
# NOTE: Some of these prechecks where kindly provided by
# the XuvTools project at http://xuvtools.org/
#
precheck-java:				$(SRCDIR)/findlibjvm.class
	@if test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		if test -z "$(JAVA_HOME)" ; then \
			echo "Could not detect JAVA_HOME variable. Please export JAVA_HOME from" ; \
			echo "your SHELL to the path of the JRE, and add it to LD_LIBRARY_PATH." ; \
			false ; \
		elif ! echo "$(LD_LIBRARY_PATH)"|grep -qs "$(JAVA_HOME)" ; then \
			echo "It seems JAVA_HOME is missing from the LD_LIBRARY_PATH variable." ; \
			echo "Please read the setup guide on how to fix that." ; \
			false ; \
		else \
			cd "$(SRCDIR)" && \
			LIBJVMPATH=$$($${JAVA_HOME}/bin/java findlibjvm 2>/dev/zero) && \
			if ! test -r "$${LIBJVMPATH}/libjvm.so" ; then \
				echo "Could not find 'libjvm.so' in the following path:" ; \
				echo "  '$${LIBJVMPATH}'" ; \
				echo "Please read the setup guide on how to fix that." ; \
				false ; \
			fi ; \
		fi ; \
	fi

precheck-env:
	@if test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		if test -z "$(HOSTTYPE)" ; then \
			echo "Could not detect HOSTTYPE variable. Please export HOSTTYPE from" ; \
			echo "your SHELL to set the default architecture of the build." ; \
			false ; \
		elif test -n "$(CPPFLAGS)" -o -n "$(LDFLAGS)" ; then \
			echo "The CPPFLAGS and/or LDFLAGS variables are set. Likely, numpy" ; \
			echo "will not compile because external flags override theirs." ; \
			echo "Please unset these variables unless you know what you are doing." ; \
			false ; \
		fi ; \
	fi

precheck-git:
	@if ! git --version 2>&1|grep -iqs '^git.*version [1-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Could not detect GIT revision management system, please compile" ; \
		echo "or install git for your platform. Alternatively, you can disable" ; \
		echo "ilastik (it is optional), or download and compile it manually." ; \
		false ; \
	fi

precheck-svn:
	@if ! svn --version 2>&1|grep -iqs '^svn.*version [1-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Could not detect a recent version of Subversion (>= 1.4.0)," ; \
		echo "please compile or install Subversion/SVN." ; \
		echo "You can also try to install SVN for your Linux distribution." ; \
		false ; \
	fi

precheck-wget:
	@if ! wget --help 2>&1|grep -qs -- '--no-check-certificate' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Your wget does not support the '--no-check-certificate' attribute." ; \
		echo "You need a newer wget, or you need to disable the use of the" ; \
		echo "attribute '--no-check-certificate' in this Makefile. To do that," ; \
		echo "try to add to the command-line WGETFLAGS=\"\"." ; \
		false ; \
	fi

precheck-cmake:
	@if ! cmake --version 2>/dev/zero|grep -iqs '^cmake.* 2\.[6-9]\|^cmake.* [0-9]\.' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Could not detect a recent cmake build system (>=2.6.0)," ; \
		echo "it is unlikely that ilastik will compile! Please install cmake" ; \
		echo "separately, or remove ilastik from the default build." ; \
		false ; \
	fi

precheck-gcc:
	@if ! gcc --version 2>/dev/zero|grep -iqs '^gcc.* [4-9]\.[1-9][0-9]*\.[0-9][0-9]*' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Could not detect a recent GCC C compiler version (>=4.1.0)," ; \
		echo "it is very unlikely that you will be able to compile fast code!" ; \
		false ; \
	fi

precheck-gpp:
	@if ! g++ --version 2>/dev/zero|grep -iqs '^g++.* [4-9]\.[1-9][0-9]*\.[0-9][0-9]*' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Could not detect a recent GCC C++ compiler version (>=4.1.0)," ; \
		echo "it is very unlikely that you will be able to compile fast code!" ; \
		false ; \
	fi

precheck-gfortran:
	@if ! gfortran --version 2>/dev/zero|grep -iqs '^GNU Fortran.* [4-9]\.[1-9][0-9]*\.[0-9][0-9]*' && test "$(DISABLE_PRECHECKS)" != "YES" ; then \
		echo "Could not detect a recent GCC Fortran 95 compiler version (>=4.1.0)," ; \
		echo "it is very unlikely that you will be able to compile fast code!" ; \
		false ; \
	fi

precheck-success:
	@echo "All pre-checks executed successfully."


precheck: $(TMPDIR)/create-dirs sethost precheck-java precheck-env precheck-svn precheck-git precheck-gcc precheck-gpp precheck-gfortran precheck-wget precheck-cmake precheck-success
.PHONY:					precheck-java precheck-env precheck-svn precheck-git precheck-gcc precheck-gpp precheck-gfortran precheck-wget precheck-cmake precheck-success precheck clean update 
#
# The temporary build directories and source directories
#
$(TMPDIR)/create-dirs:
	mkdir -p "$(TGTDIR)"
	mkdir -p "$(TMPDIR)/lib"
	mkdir -p "$(SRCDIR)"
	touch $@

#
# Here come the actual compile instructions for CP2 prerequisites,
# package by package. There is no strict ordering, but it was coded
# top-to-bottom, so you may assume that later specified packages
# depend on earlier specified packages.
#
$(TGTDIR)/python: $(SRCDIR)/$(PYTHONVERSION).tar.bz2 sqlite
	cd "$(TMPDIR)" && \
	rm -fr "$(PYTHONVERSION)" && \
	tar -xjf "$(SRCDIR)/$(PYTHONVERSION).tar.bz2" && \
	cd "$(PYTHONVERSION)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	export C_INCLUDE_PATH="$(PYTHONPREFIX)/include:$(C_INCLUDE_PATH)" && \
	./configure \
		--prefix="$(PYTHONPREFIX)" \
		--enable-shared \
				                --enable-unicode=ucs4 && \
	make install MACHDEP=linux2
	touch $@

$(TGTDIR)/cython: $(SRCDIR)/$(CYTHONVERSION).tar.gz pypi
	cd "$(TMPDIR)" && \
	rm -fr "$(CYTHONVERSION)" && \
	tar -xzf "$(SRCDIR)/$(CYTHONVERSION).tar.gz" && \
	cd "$(CYTHONVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/umfpack: $(SRCDIR)/$(UMFPACKVERSION).tar.gz $(SRCDIR)/$(CAMDVERSION).tar.gz $(SRCDIR)/$(CCOLAMDVERSION).tar.gz $(SRCDIR)/$(COLAMDVERSION).tar.gz $(SRCDIR)/$(CHOLMODVERSION).tar.gz $(SRCDIR)/$(UFCONFIGVERSION).tar.gz $(SRCDIR)/$(AMDVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "CHOLMOD" && \
	rm -fr "COLAMD" && \
	rm -fr "CCOLAMD" && \
	rm -fr "CAMD" && \
	rm -fr "UMFPACK" && \
	rm -fr "UFconfig" && \
	rm -fr "AMD" && \
	tar -xzf "$(SRCDIR)/$(CHOLMODVERSION).tar.gz" && \
	tar -xzf "$(SRCDIR)/$(COLAMDVERSION).tar.gz" && \
	tar -xzf "$(SRCDIR)/$(CCOLAMDVERSION).tar.gz" && \
	tar -xzf "$(SRCDIR)/$(CAMDVERSION).tar.gz" && \
	tar -xzf "$(SRCDIR)/$(UMFPACKVERSION).tar.gz" && \
	tar -xzf "$(SRCDIR)/$(UFCONFIGVERSION).tar.gz" && \
	tar -xzf "$(SRCDIR)/$(AMDVERSION).tar.gz" && \
	perl -pi -e 's@(^CHOLMOD_CONFIG )=.*@$$1= -DNPARTITION@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^CC )=.*@$$1= gcc@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^CFLAGS .*)@$$1 -m64 -fPIC@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^F77 )=.*@$$1= gfortran@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^F77FLAGS .*)@$$1 -m64 -fPIC@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^BLAS )=.*@$$1= -L$(ATLASPREFIX) -llapack -lblas -latlas -lgfortran@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^LAPACK )=.*@$$1= -L$(ATLASPREFIX) -llapack -lblas -latlas -lgfortran@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^METIS_PATH )=.*@$$1= @g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^METIS )=.*@$$1= @g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^INSTALL_LIB )=.*@$$1= $(UMFPACKPREFIX)/lib@g' UFconfig/UFconfig.mk && \
	perl -pi -e 's@(^INSTALL_INCLUDE )=.*@$$1= $(UMFPACKPREFIX)/include@g' UFconfig/UFconfig.mk && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	cd "UMFPACK" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install && \
	cp -p "../AMD/Include/amd.h" "$(UMFPACKPREFIX)/include/" && \
	cp -p "../UFconfig/UFconfig.h" "$(UMFPACKPREFIX)/include/"
	touch $@

$(TGTDIR)/fftw:	$(FFTWPREFIX)/lib/libfftw3.la $(FFTWPREFIX)/lib/libfftw3l.la $(FFTWPREFIX)/lib/libfftw3f.la
	touch $@

$(FFTWPREFIX)/lib/libfftw3.la:		$(SRCDIR)/$(FFTWVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "$(FFTWVERSION)" && \
	tar -xzf "$(SRCDIR)/$(FFTWVERSION).tar.gz" && \
	cd "$(FFTWVERSION)" && \
	./configure \
		--enable-sse2 \
		--enable-shared \
		--prefix="$(FFTWPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

$(FFTWPREFIX)/lib/libfftw3l.la:		$(SRCDIR)/$(FFTWVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "$(FFTWVERSION)" && \
	tar -xzf "$(SRCDIR)/$(FFTWVERSION).tar.gz" && \
	cd "$(FFTWVERSION)" && \
	./configure \
		--enable-long-double \
		--enable-shared \
		--prefix="$(FFTWPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

$(FFTWPREFIX)/lib/libfftw3f.la:		$(SRCDIR)/$(FFTWVERSION).tar.gz $(FFTWPREFIX)/lib/libfftw3.la $(FFTWPREFIX)/lib/libfftw3l.la
	cd "$(TMPDIR)" && \
	rm -fr "$(FFTWVERSION)" && \
	tar -xzf "$(SRCDIR)/$(FFTWVERSION).tar.gz" && \
	cd "$(FFTWVERSION)" && \
	./configure \
		--enable-float \
		--enable-sse \
		--enable-shared \
		--prefix="$(FFTWPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

$(TGTDIR)/numpy: $(SRCDIR)/$(NUMPYVERSION).tar.gz $(SRCDIR)/mtrand.pyx.patch umfpack fftw pypi
	cd "$(TMPDIR)" && \
	rm -fr "$(NUMPYVERSION)" && \
	tar -zxf "$(SRCDIR)/$(NUMPYVERSION).tar.gz" && \
	cd "$(NUMPYVERSION)" && \
	cp site.cfg.example site.cfg && \
	perl -pi -e 's@#(\[DEFAULT\])@$$1@g' site.cfg && \
	perl -pi -e 's@#(library_dirs.*)@$$1:/usr/lib64:$(PYTHONPREFIX)/lib@g' site.cfg && \
	perl -pi -e 's@#(include_dirs.*)@$$1:$(PYTHONPREFIX)/include@g' site.cfg && \
	perl -pi -e 's@#(\[lapack_opt\])@$$1@g' site.cfg && \
	perl -pi -e 's@#(libraries = lapack, blas, atlas)@$$1, gfortran@g' site.cfg && \
	perl -pi -e 's@#(\[amd\])@$$1@g' site.cfg && \
	perl -pi -e 's@#(amd_libs)@$$1@g' site.cfg && \
	perl -pi -e 's@#(\[umfpack\])@$$1@g' site.cfg && \
	perl -pi -e 's@#(umfpack_libs)@$$1@g' site.cfg && \
	perl -pi -e 's@#(\[fftw\])@$$1@g' site.cfg && \
	perl -pi -e 's@#(libraries = fftw3)@$$1@g' site.cfg && \
	perl -pi -e 's@#(\[djbfft\])@$$1@g' site.cfg && \
	patch -p0 < $(SRCDIR)/mtrand.pyx.patch && \
	export MKL="None" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	cd numpy/random/mtrand && \
	$(PYTHON) generate_mtrand_c.py && \
	cd ../../.. && \
	$(PYTHON) setup.py build --fcompiler=gfortran && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pcre: $(SRCDIR)/$(PCREVERSION).tar.bz2
	cd "$(TMPDIR)" && \
	rm -fr "$(PCREVERSION)" && \
	tar -xjf "$(SRCDIR)/$(PCREVERSION).tar.bz2" && \
	cd "$(PCREVERSION)" && \
	./configure \
		--prefix="$(PCREPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/swig: $(SRCDIR)/$(SWIGVERSION).tar.gz pcre
	cd "$(TMPDIR)" && \
	rm -fr "$(SWIGVERSION)" && \
	tar -xzf "$(SRCDIR)/$(SWIGVERSION).tar.gz" && \
	cd "$(SWIGVERSION)" && \
	export PCRE_CONFIG="$(PCREPREFIX)/bin/pcre-config" && \
	export LD_LIBRARY_PATH="$(PCREPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
		--prefix="$(SWIGPREFIX)" \
		--with-python="$(PYTHON)" \
		--without-python3 && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/scipy: $(SRCDIR)/$(SCIPYVERSION).tar.gz umfpack numpy pypi swig
	cd "$(TMPDIR)" && \
	rm -fr "$(SCIPYVERSION)" && \
	tar -zxf "$(SRCDIR)/$(SCIPYVERSION).tar.gz" && \
	cd "$(SCIPYVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build --fcompiler=gfortran && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/matplotlib: $(SRCDIR)/$(MATPLOTLIBVERSION).tar.gz tiff jpeg python numpy wxpython
	cd "$(TMPDIR)" && \
	rm -fr "$(MATPLOTLIBVERSION)" && \
	tar -zxf "$(SRCDIR)/$(MATPLOTLIBVERSION).tar.gz" && \
	cd "$(MATPLOTLIBVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$(PANGOPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	export CPPFLAGS="-I$(JPEGPREFIX)/include -I$(TIFFPREFIX)/include -I$(ZLIBPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(JPEGPREFIX)/lib -L$(TIFFPREFIX)/lib -L$(ZLIBPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(JPEGPREFIX)/lib:$(TIFFPREFIX)/lib:$(ZLIBPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pypi: $(SRCDIR)/$(PYPIVERSION).tar.gz python
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	cd "$(TMPDIR)" && \
	rm -fr "$(PYPIVERSION)" && \
	tar -zxf "$(SRCDIR)/$(PYPIVERSION).tar.gz" && \
	cd "$(PYPIVERSION)" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/decorator: $(SRCDIR)/$(DECORATORVERSION).tar.gz pypi
	cd "$(TMPDIR)" && \
	rm -fr "$(DECORATORVERSION)" && \
	tar -xzf "$(SRCDIR)/$(DECORATORVERSION).tar.gz" && \
	cd "$(DECORATORVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/ncurses: $(SRCDIR)/$(NCURSESVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "$(NCURSESVERSION)" && \
	tar -xzf "$(SRCDIR)/$(NCURSESVERSION).tar.gz" && \
	cd "$(NCURSESVERSION)" && \
	./configure \
		--prefix="$(NCURSESPREFIX)" \
		--with-shared \
		--without-ada \
		--without-debug \
		--enable-widec && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/sqlite: $(SRCDIR)/$(SQLITEVERSION).tar.gz zlib
	cd "$(TMPDIR)" && \
	rm -fr "$(SQLITEVERSION)" && \
	tar -zxf "$(SRCDIR)/$(SQLITEVERSION).tar.gz" && \
	cd "$(SQLITEVERSION)" && \
	export CPPFLAGS="-I$(ZLIBPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(ZLIBPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(ZLIBPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
		--prefix="$(SQLITEPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/pysqlite: $(SRCDIR)/$(PYSQLITEVERSION).tar.gz python sqlite zlib
	cd "$(TMPDIR)" && \
	rm -fr "$(PYSQLITEVERSION)" && \
	tar -zxf "$(SRCDIR)/$(PYSQLITEVERSION).tar.gz" && \
	cd "$(PYSQLITEVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	export CPPFLAGS="-I$(SQLITEPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(SQLITEPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(SQLITEPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/mysql: $(SRCDIR)/$(MYSQLVERSION).tar.gz zlib ncurses
	cd "$(TMPDIR)" && \
	rm -fr "$(MYSQLVERSION)" && \
	tar -zxf "$(SRCDIR)/$(MYSQLVERSION).tar.gz" && \
	cd "$(MYSQLVERSION)" && \
	export CPPFLAGS="-I$(NCURSESPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(NCURSESPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(NCURSESPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
		--prefix="$(MYSQLPREFIX)" \
		--with-zlib-dir="$(ZLIBPREFIX)" \
		--disable-community-features \
		--enable-local-infile \
		--without-server \
		--without-docs && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/mysqlpython: $(SRCDIR)/$(MYSQLPYTHONVERSION).tar.gz pypi mysql
	cd "$(TMPDIR)" && \
	rm -fr "$(MYSQLPYTHONVERSION)" && \
	tar -xzf "$(SRCDIR)/$(MYSQLPYTHONVERSION).tar.gz" && \
	cd "$(MYSQLPYTHONVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pyopengl: $(SRCDIR)/$(PYOPENGLVERSION).tar.gz numpy pil
	cd "$(TMPDIR)" && \
	rm -fr "$(PYOPENGLVERSION)" && \
	tar -zxf "$(SRCDIR)/$(PYOPENGLVERSION).tar.gz" && \
	cd "$(PYOPENGLVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pyopenglaccel: $(SRCDIR)/$(PYOPENGLACCELVERSION).tar.gz $(PYTHON) pyopengl
	cd "$(TMPDIR)" && \
	rm -fr "$(PYOPENGLACCELVERSION)" && \
	tar -zxf "$(SRCDIR)/$(PYOPENGLACCELVERSION).tar.gz" && \
	cd "$(PYOPENGLACCELVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/qt: $(SRCDIR)/$(QTVERSION).tar.gz zlib jpeg
	cd "$(TMPDIR)" && \
	rm -fr "$(QTVERSION)" && \
	tar -zxf "$(SRCDIR)/$(QTVERSION).tar.gz" && \
	cd "$(QTVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
	    --prefix="$(PREFIX)" \
	    -developer-build \
	    -opengl \
	    -opensource \
	    -confirm-license \
	    -no-xmlpatterns \
	    -no-audio-backend \
	    -no-phonon \
	    -no-webkit \
	    -no-script && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/pyqt: $(SRCDIR)/$(PYQTVERSION).tar.gz sip pyopenglaccel qt
	cd "$(TMPDIR)" && \
	rm -fr "$(PYQTVERSION)" && \
	tar -zxf "$(SRCDIR)/$(PYQTVERSION).tar.gz" && \
	cd "$(PYQTVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) configure.py --confirm-license -g -q $(QTMAKE) \
		--enable=QtCore --enable=QtGui --enable=QtDeclarative \
		--enable=QtMultimedia --enable=QtNetwork --enable=QtOpenGL \
		--enable=QtTest --no-designer-plugin && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/sip: $(SRCDIR)/$(SIPVERSION).tar.gz python
	cd "$(TMPDIR)" && \
	rm -fr "$(SIPVERSION)" && \
	tar -zxf "$(SRCDIR)/$(SIPVERSION).tar.gz" && \
	cd "$(SIPVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) configure.py && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/wx: $(SRCDIR)/wxX11-$(WXVERSION).tar.bz2
	cd "$(TMPDIR)" && \
	rm -rf "wxX11-$(WXVERSION)" && \
	tar xvf "$(SRCDIR)/wxX11-$(WXVERSION).tar.bz2" && \
	cd "wxX11-$(WXVERSION).tar.bz2" && \
	./configure && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/wxpython: $(SRCDIR)/wxPython-src-$(WXPYTHONVERSION).tar.bz2 python jpeg zlib tiff
	cd "$(TMPDIR)" && \
	rm -fr "wxPython-src-$(WXPYTHONVERSION)" && \
	tar -xjf "$(SRCDIR)/wxPython-src-$(WXPYTHONVERSION).tar.bz2" && \
	rm -fr "wxPython-src-$(WXPYTHONVERSION)-$(HOSTTYPE)" && \
	mkdir "wxPython-src-$(WXPYTHONVERSION)-$(HOSTTYPE)" && \
	cd "wxPython-src-$(WXPYTHONVERSION)-$(HOSTTYPE)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	export CPPFLAGS="-I$(JPEGPREFIX)/include -I$(TIFFPREFIX)/include -I$(ZLIBPREFIX)/include -I$(SQLITEPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(JPEGPREFIX)/lib -L$(TIFFPREFIX)/lib -L$(ZLIBPREFIX)/lib -L$(SQLITEPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(JPEGPREFIX)/lib:$(TIFFPREFIX)/lib:$(ZLIBPREFIX)/lib:$(SQLITEPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	if test -f "$(GTKPREFIX)/lib/libgtk-x11-2.0.la" ; then \
		export CPPFLAGS="-I$(GTKPREFIX)/include $${CPPFLAGS}" && \
		export LDFLAGS="-L$(GTKPREFIX)/lib $${LDFLAGS}" && \
		export LD_LIBRARY_PATH="$(GTKPREFIX)/lib:$${LD_LIBRARY_PATH}" ; \
	fi && \
	if test -d "$(GLIBPREFIX)/lib/pkgconfig" ; then \
		export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" ; \
	fi && \
	"../wxPython-src-$(WXPYTHONVERSION)/configure" \
		--prefix="$(WXPYTHONPREFIX)" \
		$(WXPYTHONTOOLKIT_$(WXUSEGTK)) \
		$(WXFLAGS) && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) $(MAKE_FLAGS) -C contrib/src/gizmos && \
	$(MAKE) $(MAKE_FLAGS) -C contrib/src/stc && \
	$(MAKE) -j1 install && \
	$(MAKE) -j1 install -C contrib/src/gizmos && \
	$(MAKE) -j1 install -C contrib/src/stc && \
	cd "../wxPython-src-$(WXPYTHONVERSION)/wxPython/" && \
	$(PYTHON) setup.py build_ext --inplace && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/nose: $(SRCDIR)/$(PYTHONNOSEVERSION).tar.gz python
	cd "$(TMPDIR)" && \
	rm -fr "$(PYTHONNOSEVERSION)" && \
	tar -xzf "$(SRCDIR)/$(PYTHONNOSEVERSION).tar.gz" && \
	cd "$(PYTHONNOSEVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pil: $(SRCDIR)/$(PILVERSION).tar.gz python jpeg zlib tiff
	cd "$(TMPDIR)" && \
	rm -fr "$(PILVERSION)" && \
	tar -xzf "$(SRCDIR)/$(PILVERSION).tar.gz" && \
	cd "$(PILVERSION)" && \
	perl -pi -e 's@(^JPEG_ROOT.*?)=.*@$$1= "$(JPEGPREFIX)"@g' setup.py && \
	perl -pi -e 's@(^ZLIB_ROOT.*?)=.*@$$1= "$(ZLIBPREFIX)"@g' setup.py && \
	perl -pi -e 's@(^TIFF_ROOT.*?)=.*@$$1= "$(TIFFPREFIX)"@g' setup.py && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build_ext -i && \
	$(PYTHON) selftest.py && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/jpeg: $(SRCDIR)/jpegsrc.v$(JPEGVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "jpeg-$(JPEGVERSION)" && \
	tar -xzf "$(SRCDIR)/jpegsrc.v$(JPEGVERSION).tar.gz" && \
	cd "jpeg-$(JPEGVERSION)" && \
	./configure \
		CC="gcc" CPP="cpp" \
		--prefix="$(JPEGPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/zlib: $(SRCDIR)/$(ZLIBVERSION).tar.bz2
	cd "$(TMPDIR)" && \
	rm -fr "$(ZLIBVERSION)" && \
	tar -xjf "$(SRCDIR)/$(ZLIBVERSION).tar.bz2" && \
	cd "$(ZLIBVERSION)" && \
	./configure \
		--prefix="$(ZLIBPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install && \
	if ! test -r "$(ZLIBPREFIX)/include/zlib.h" ; then \
		echo "error finding zlib.h" && \
		exit 1 ; \
	fi
	touch $@

#$(TGTDIR)/png: $(SRCDIR)/$(PNGVERSION).tar.bz2
#	cd "$(TMPDIR)" && \
#	rm -fr "$(PNGVERSION)" && \
#	tar -xjf "$(SRCDIR)/$(PNGVERSION).tar.bz2" && \
#	cd "$(PNGVERSION)" && \
#	./configure \
#		--prefix="$(PNGPREFIX)" && \
#	$(MAKE) $(MAKE_FLAGS) && \
#	$(MAKE) -j1 install
#	touch $@

$(TGTDIR)/tiff: $(SRCDIR)/$(TIFFVERSION).tar.gz zlib jpeg
	mkdir -p "$(TMPDIR)" && cd "$(TMPDIR)" && \
	rm -fr "$(TIFFVERSION)" && \
	tar -xzf "$(SRCDIR)/$(TIFFVERSION).tar.gz" && \
	cd "$(TIFFVERSION)" && \
	./configure \
		--prefix="$(TIFFPREFIX)" \
		--enable-cxx \
		--with-zlib-include-dir="$(ZLIBPREFIX)/include" \
		--with-zlib-lib-dir="$(ZLIBPREFIX)/lib" \
		--with-jpeg-include-dir="$(JPEGPREFIX)/include" \
		--with-jpeg-lib-dir="$(JPEGPREFIX)/lib" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/hdf5: $(SRCDIR)/$(HDF5VERSION).tar.bz2 zlib
	cd "$(TMPDIR)" && \
	rm -fr "$(HDF5VERSION)" && \
	tar -xjf "$(SRCDIR)/$(HDF5VERSION).tar.bz2" && \
	cd "$(HDF5VERSION)" && \
	./configure \
		--prefix="$(HDF5PREFIX)" \
		--with-pic \
		--enable-hl \
		--enable-cxx \
		--enable-fortran \
		--enable-production \
		--with-zlib="$(ZLIBPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/h5py: $(SRCDIR)/$(H5PYVERSION).tar.gz hdf5 numpy
	cd "$(TMPDIR)" && \
	rm -fr "$(H5PYVERSION)" && \
	tar -xzf "$(SRCDIR)/$(H5PYVERSION).tar.gz" && \
	cd "$(H5PYVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build \
		--hdf5="$(HDF5PREFIX)" && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pyzmq: $(SRCDIR)/$(PYZMQVERSION).tar.gz python
	cd "$(TMPDIR)" && \
	rm -fr "$(PYZMQVERSION)" && \
	tar -xzf "$(SRCDIR)/$(PYZMQVERSION).tar.gz" && \
	cd "$(PYZMQVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/javabridge: $(SRCDIR)/$(JAVABRIDGEVERSION).tar.gz python numpy
	cd "$(TMPDIR)" && \
	rm -fr "$(JAVABRIDGEVERSION)" && \
	tar -xzf "$(SRCDIR)/$(JAVABRIDGEVERSION).tar.gz" && \
	cd "$(JAVABRIDGEVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/bioformats: $(SRCDIR)/$(BIOFORMATSVERSION).tar.gz python javabridge
	cd "$(TMPDIR)" && \
	rm -fr "$(BIOFORMATSVERSION)" && \
	tar -xzf "$(SRCDIR)/$(BIOFORMATSVERSION).tar.gz" && \
	cd "$(BIOFORMATSVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/boost: $(SRCDIR)/$(BOOSTVERSION).tar.bz2 python
	cd "$(TMPDIR)" && \
	rm -fr "$(BOOSTVERSION)" && \
	tar -xjf "$(SRCDIR)/$(BOOSTVERSION).tar.bz2" && \
	cd "$(BOOSTVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./bootstrap.sh \
		--prefix="$(BOOSTPREFIX)" \
		--with-python-root="$(PYTHONPREFIX)" \
		--with-libraries="python" && \
	./bjam install
	touch $@
#
# Vigra work-arounds: gcc 4.7.7 distributed with Red Hat 6 segfaults when
# it encounters an optimization that can't work for RGB iterators but can
# for RGBA (but the code path is never taken for RGB).
#
# impex.hxx.patch removes the optimization
#
$(TGTDIR)/vigra: $(SRCDIR)/$(VIGRAVERSION)-src.tar.gz numpy fftw hdf5 tiff jpeg boost
	cd "$(TMPDIR)" && \
	rm -fr "$(VIGRAVERSION)" && \
	tar -zxf "$(SRCDIR)/$(VIGRAVERSION)-src.tar.gz" && \
	cd "$(TMPDIR)/$(VIGRAVERSION)/include/vigra" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/impex.hxx.patch" && \
	patch < impex.hxx.patch && \
	cd "$(TMPDIR)/$(VIGRAVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	cmake \
		-DCMAKE_INSTALL_PREFIX="$(VIGRAPREFIX)" \
		-DPYTHON_EXECUTABLE="$(PYTHON)" \
		-DPYTHON_LIBRARY="$(PYTHONPREFIX)/lib/libpython$(PYVERSION).so" \
		-DCMAKE_PREFIX_PATH="$(PYTHONPREFIX)" \
		-DDEPENDENCY_SEARCH_PREFIX="$(HDF5PREFIX);$(FFTWPREFIX);$(TIFFPREFIX);$(JPEGPREFIX)" && \
	$(MAKE) && \
	$(MAKE) install
	touch $@

$(TGTDIR)/ilastik: $(SRCDIR)/ilastik-v$(ILASTIKVERSION).tar.gz vigra pyqt qimgtoarr
	cd "$(TMPDIR)" && \
	rm -fr "ilastik-v$(ILASTIKVERSION)" && \
	tar -xzf "$(SRCDIR)/ilastik-v$(ILASTIKVERSION).tar.gz" && \
	cd "$(TMPDIR)/ilastik-v$(ILASTIKVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/qimgtoarr: $(SRCDIR)/$(QIMGTOARRVERSION).tar.gz numpy pyqt
	cd "$(TMPDIR)" && \
	rm -fr "$(QIMGTOARRVERSION)" && \
	tar -xzf "$(SRCDIR)/$(QIMGTOARRVERSION).tar.gz" && \
	cd "$(QIMGTOARRVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/cellh5: $(SRCDIR)/$(CELLH5VERSION).tar.gz $(SRCDIR)/$(CELLH5VERSION).patch sklearn pandas lxml
	cd "$(TMPDIR)" && \
	rm -fr "$(CELLH5VERSION)" && \
	tar -xzf "$(SRCDIR)/$(CELLH5VERSION).tar.gz" && \
	cd "$(CELLH5VERSION)" && \
	dos2unix -k pysrc/cellh5write.py && \
	cat "$(SRCDIR)/$(CELLH5VERSION).patch" | patch -p1 -l && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/sklearn: $(SRCDIR)/$(SKLEARNVERSION).tar.gz scipy
	cd "$(TMPDIR)" && \
	rm -fr "$(SKLEARNVERSION)" && \
	tar -xzf "$(SRCDIR)/$(SKLEARNVERSION).tar.gz" && \
	cd "$(SKLEARNVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pandas: $(SRCDIR)/$(PANDASVERSION).tar.gz pytz dateutil
	cd "$(TMPDIR)" && \
	rm -fr "$(PANDASVERSION)" && \
	tar -xzf "$(SRCDIR)/$(PANDASVERSION).tar.gz" && \
	cd "$(PANDASVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/dateutil: $(SRCDIR)/$(DATEUTILVERSION).tar.gz python
	cd "$(TMPDIR)" && \
	rm -fr "$(DATEUTILVERSION)" && \
	tar -xzf "$(SRCDIR)/$(DATEUTILVERSION).tar.gz" && \
	cd "$(DATEUTILVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/pytz: $(SRCDIR)/$(PYTZVERSION).tar.bz2 python
	cd "$(TMPDIR)" && \
	rm -fr "$(PYTZVERSION)" && \
	tar -xjf "$(SRCDIR)/$(PYTZVERSION).tar.bz2" && \
	cd "$(PYTZVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

$(TGTDIR)/libiconv: $(SRCDIR)/$(LIBICONVVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "$(LIBICONVVERSION)" && \
	tar -xzf "$(SRCDIR)/$(LIBICONVVERSION).tar.gz" && \
	cd "$(LIBICONVVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure --prefix=$(PREFIX) && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/libxml2: $(SRCDIR)/$(LIBXML2VERSION).tar.gz libiconv
	cd "$(TMPDIR)" && \
	rm -fr "$(LIBXML2VERSION)" && \
	tar -xzf "$(SRCDIR)/$(LIBXML2VERSION).tar.gz" && \
	cd "$(LIBXML2VERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure --prefix=$(PREFIX) --with-iconv=$(PREFIX) --without-python && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/libxslt: $(SRCDIR)/$(LIBXSLTVERSION).tar.gz libxml2
	cd "$(TMPDIR)" && \
	rm -fr "$(LIBXSLTVERSION)" && \
	tar -xzf "$(SRCDIR)/$(LIBXSLTVERSION).tar.gz" && \
	cd "$(LIBXSLTVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure --prefix=$(PREFIX) --with-libxml-prefix=$(PREFIX) --without-python && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install
	touch $@

$(TGTDIR)/lxml: $(SRCDIR)/$(LXMLVERSION).tar.gz six libxml2 libxslt
	cd "$(TMPDIR)" && \
	rm -fr "$(LXMLVERSION)" && \
	tar -xzf "$(SRCDIR)/$(LXMLVERSION).tar.gz" && \
	cd "$(LXMLVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build install
	$(PYTHON) -c "import lxml.objectify"
	touch $@

$(TGTDIR)/six: $(SRCDIR)/$(SIXVERSION).tar.gz python
	cd "$(TMPDIR)" && \
	rm -fr "$(SIXVERSION)" && \
	tar -xzf "$(SRCDIR)/$(SIXVERSION).tar.gz" && \
	cd "$(SIXVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@
cp2: cellprofiler

cellprofiler: cython wxpython h5py scipy ilastik matplotlib decorator mysqlpython pysqlite nose pil pyzmq javabridge bioformats cellh5
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	"$(PYTHON)" ./CellProfiler.py --build-and-exit && \
	touch "$@"
	
batchprofiler: cellprofiler yattag $(PREFIX)/bin/cpenv.sh

#
# Batch profiler only
#
$(TGTDIR)/yattag: $(SRCDIR)/$(YATTAGVERSION).tar.gz python
	cd "$(TMPDIR)" && \
	rm -fr "$(YATTAGVERSION)" && \
	tar -xzf "$(SRCDIR)/$(YATTAGVERSION).tar.gz" && \
	cd "$(YATTAGVERSION)" && \
	export PATH="$(PYTHONPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(PYTHONPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	$(PYTHON) setup.py build && \
	$(PYTHON) setup.py install
	touch $@

#
# A script to set the environment variables needed by CP
# An alternate JAVA_HOME or PREFIX may be defined
#
# Typical usage would be
#
# . <prefix>/bin/cpenv.sh
# cd $(PREFIX)/src/CellProfiler
# python CellProfiler.py --do-not-build --do-not-fetch ...
#
#
$(PREFIX)/bin/cpenv.sh:
	echo "# cpenv.sh - generated by CellProfiler/Makefile.CP2" > $@
	echo "#" >> $@
	echo "# This script is designed to export the environment needed" >> $@
	echo "# by CellProfiler. Usage:" >> $@
	echo "#" >> $@
	echo "#    . /usr/CellProfiler/bin/cpenv.sh" >> $@
	echo "#    cd /usr/CellProfiler/src/CellProfiler" >> $@
	echo "#    python CellProfiler.py --do-not-build --do-not-fetch" >> $@
	echo "############################################################" >> $@
	echo >> $@
	echo "export PREFIX=$(PREFIX)" >> $@
	echo ": $(DOLLAR){JAVA_HOME=$(JAVA_HOME)}" >> $@
	echo "export JAVA_HOME" >> $@
	echo "export PATH=$(PREFIX)/bin:$(DOLLAR)PATH:$(DOLLAR)JAVA_HOME/bin" >> $@
	echo "export LD_LIBRARY_PATH=$(PREFIX)/lib:$(PREFIX)/lib/mysql:$(DOLLAR)LD_LIBRARY_PATH:$(DOLLAR)JAVA_HOME/jre/lib/$(HOSTTYPE)/server" >> $@
	echo ": $(DOLLAR){LC_ALL=en_US.UTF-8}" >> $@
	echo "export LC_ALL">> $@
	chmod a+x $@
#
# The test target needs an X11 $DISPLAY to run the full suite of tests
# Consider running Xvfb to make a virtual display
#
test: cellprofiler $(PREFIX)/bin/cpenv.sh
	. "$(PREFIX)/bin/cpenv.sh" && \
	"$(PYTHON)" ./cpnose.py --with-javabridge --no-headless -m "(?:^)test_.*"

#
# The following are optional sources, in case gtk is
# missing from the target system
#
glib:					$(GLIBPREFIX)/lib/libglib-2.0.la
$(GLIBPREFIX)/lib/libglib-2.0.la:	$(SRCDIR)/$(GLIBVERSION).tar.bz2 pcre gettext
	cd "$(TMPDIR)" && \
	rm -fr "$(GLIBVERSION)" && \
	tar -xjf "$(SRCDIR)/$(GLIBVERSION).tar.bz2" && \
	cd "$(GLIBVERSION)" && \
	export PATH="$(GETTEXTPREFIX)/bin:$(PATH)" && \
	export PCRE_CONFIG="$(PCREPREFIX)/bin/pcre-config" && \
	export CPPFLAGS="-I$(PCREPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(PCREPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(PCREPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
		--prefix="$(GLIBPREFIX)" \
		--enable-debug=no \
		--disable-static && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

pango:					$(PANGOPREFIX)/lib/libpango-1.0.la
$(PANGOPREFIX)/lib/libpango-1.0.la:	$(SRCDIR)/$(PANGOVERSION).tar.bz2 glib cairo
	cd "$(TMPDIR)" && \
	rm -fr "$(PANGOVERSION)" && \
	tar -xjf "$(SRCDIR)/$(PANGOVERSION).tar.bz2" && \
	cd "$(PANGOVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PATH)" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	./configure \
		--prefix="$(PANGOPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

pixman:					$(PIXMANPREFIX)/lib/libpixman-1.la
$(PIXMANPREFIX)/lib/libpixman-1.la:	$(SRCDIR)/$(PIXMANVERSION).tar.gz glib gdk_pixbuf
	cd "$(TMPDIR)" && \
	rm -fr "$(PIXMANVERSION)" && \
	tar -xzf "$(SRCDIR)/$(PIXMANVERSION).tar.gz" && \
	cd "$(PIXMANVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PATH)" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	./configure \
		--prefix="$(PIXMANPREFIX)" \
		--disable-static && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

gdk-pixbuf:				$(GDKPIXBUFPREFIX)/lib/libgdk_pixbuf-2.0.so
$(GDKPIXBUFPREFIX)/lib/libgdk_pixbuf-2.0.so:	$(SRCDIR)/$(GDKPIXBUFVERSION).tar.bz2 tiff jpeg glib
	mkdir -p "$(TMPDIR)" && cd "$(TMPDIR)" && \
	rm -fr "$(GDKPIXBUFVERSION)" && \
	tar -xjf "$(SRCDIR)/$(GDKPIXBUFVERSION).tar.bz2" && \
	cd "$(GDKPIXBUFVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PATH)" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	export CPPFLAGS="-I$(JPEGPREFIX)/include -I$(TIFFPREFIX)/include -I$(ZLIBPREFIX)/include -I$(SQLITEPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(JPEGPREFIX)/lib -L$(TIFFPREFIX)/lib -L$(ZLIBPREFIX)/lib -L$(SQLITEPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(JPEGPREFIX)/lib:$(TIFFPREFIX)/lib:$(ZLIBPREFIX)/lib:$(SQLITEPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
		--prefix="$(GDKPIXBUFPREFIX)" \
		--enable-debug=no \
		--with-libpng \
		--with-libjpeg \
		--with-libtiff \
		--disable-static && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

atk:					$(ATKPREFIX)/lib/libatk-1.0.la
$(ATKPREFIX)/lib/libatk-1.0.la:		$(SRCDIR)/$(ATKVERSION).tar.bz2 glib
	cd "$(TMPDIR)" && \
	rm -fr "$(ATKVERSION)" && \
	tar -xjf "$(SRCDIR)/$(ATKVERSION).tar.bz2" && \
	cd "$(ATKVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PATH)" && \
	export LD_LIBRARY_PATH="$(GLIBPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	./configure \
		--prefix="$(ATKPREFIX)" && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

cairo:					$(CAIROPREFIX)/lib/libcairo.la
$(CAIROPREFIX)/lib/libcairo.la:		$(SRCDIR)/$(CAIROVERSION).tar.gz pixman fontconfig
	cd "$(TMPDIR)" && \
	rm -fr "$(CAIROVERSION)" && \
	tar -xzf "$(SRCDIR)/$(CAIROVERSION).tar.gz" && \
	cd "$(CAIROVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PATH)" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	export CPPFLAGS="-I$(JPEGPREFIX)/include -I$(TIFFPREFIX)/include -I$(ZLIBPREFIX)/include -I$(SQLITEPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(JPEGPREFIX)/lib -L$(TIFFPREFIX)/lib -L$(ZLIBPREFIX)/lib -L$(SQLITEPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(JPEGPREFIX)/lib:$(TIFFPREFIX)/lib:$(ZLIBPREFIX)/lib:$(SQLITEPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	./configure \
		--prefix="$(CAIROPREFIX)" \
		--enable-png=yes \
		--disable-static && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install


fontconfig:				$(FONTCFGPREFIX)/lib/libfontconfig.la
$(FONTCFGPREFIX)/lib/libfontconfig.la:	$(SRCDIR)/$(FONTCFGVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "$(FONTCFGVERSION)" && \
	tar -xzf "$(SRCDIR)/$(FONTCFGVERSION).tar.gz" && \
	cd "$(FONTCFGVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PATH)" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	./configure \
		--prefix="$(FONTCFGPREFIX)" \
		--disable-static && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

libgtk:					$(GTKPREFIX)/lib/libgtk-x11-2.0.la
$(GTKPREFIX)/lib/libgtk-x11-2.0.la:	$(SRCDIR)/$(GTKVERSION).tar.bz2 glib pango cairo atk
	cd "$(TMPDIR)" && \
	rm -fr "$(GTKVERSION)" && \
	tar -xjf "$(SRCDIR)/$(GTKVERSION).tar.bz2" && \
	cd "$(GTKVERSION)" && \
	export PATH="$(GLIBPREFIX)/bin:$(PANGOPREFIX)/bin:$(PATH)" && \
	export CPPFLAGS="-I$(GLIBPREFIX)/include $${CPPFLAGS}" && \
	export LDFLAGS="-L$(GLIBPREFIX)/lib $${LDFLAGS}" && \
	export LD_LIBRARY_PATH="$(GLIBPREFIX)/lib:$${LD_LIBRARY_PATH}" && \
	export PKG_CONFIG_PATH="$(GLIBPREFIX)/lib/pkgconfig:$(PANGOPREFIX)/lib/pkgconfig:$${PKG_CONFIG_PATH}" && \
	./configure \
		--prefix="$(GTKPREFIX)" \
		--disable-static \
		--enable-debug=no && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

gettext:				$(GETTEXTPREFIX)/bin/gettext
$(GETTEXTPREFIX)/bin/gettext:		$(SRCDIR)/$(GETTEXTVERSION).tar.gz
	cd "$(TMPDIR)" && \
	rm -fr "$(GETTEXTVERSION)" && \
	tar -xzf "$(SRCDIR)/$(GETTEXTVERSION).tar.gz" && \
	cd "$(GETTEXTVERSION)" && \
	./configure \
		    --prefix="$(GETTEXTPREFIX)" \
		    --enable-debug=no && \
	$(MAKE) $(MAKE_FLAGS) && \
	$(MAKE) -j1 install

# clean targets
clean:
	rm -fr "$(TMPDIR)/$(ATKVERSION)"
	rm -fr "$(TMPDIR)/$(BIOFORMATSVERSION)"
	rm -fr "$(TMPDIR)/$(BOOSTVERSION)"
	rm -fr "$(TMPDIR)/$(CAIROVERSION)"
	rm -fr "$(TMPDIR)/$(CYTHONVERSION)"
	rm -fr "$(TMPDIR)/$(DECORATORVERSION)"
	rm -fr "$(TMPDIR)/$(FFTWVERSION)"
	rm -fr "$(TMPDIR)/$(FONTCFGVERSION)"
	rm -fr "$(TMPDIR)/$(GDKPIXBUFVERSION)"
	rm -fr "$(TMPDIR)/$(GETTEXTVERSION)"
	rm -fr "$(TMPDIR)/$(GLIBVERSION)"
	rm -fr "$(TMPDIR)/$(GTKVERSION)"
	rm -fr "$(TMPDIR)/$(H5PYVERSION)"
	rm -fr "$(TMPDIR)/$(HDF5VERSION)"
	rm -fr "$(TMPDIR)/$(JAVABRIDGEVERSION)"
	rm -fr "$(TMPDIR)/$(LAPACKVERSION)"
	rm -fr "$(TMPDIR)/$(MATPLOTLIBVERSION)"
	rm -fr "$(TMPDIR)/$(MYSQLPYTHONVERSION)"
	rm -fr "$(TMPDIR)/$(MYSQLVERSION)"
	rm -fr "$(TMPDIR)/$(NCURSESVERSION)"
	rm -fr "$(TMPDIR)/$(NUMPYVERSION)"
	rm -fr "$(TMPDIR)/$(PANGOVERSION)"
	rm -fr "$(TMPDIR)/$(PCREVERSION)"
	rm -fr "$(TMPDIR)/$(PILVERSION)"
	rm -fr "$(TMPDIR)/$(PIXMANVERSION)"
	rm -fr "$(TMPDIR)/$(PYOPENGLACCELVERSION)"
	rm -fr "$(TMPDIR)/$(PYOPENGLVERSION)"
	rm -fr "$(TMPDIR)/$(PYQTVERSION)"
	rm -fr "$(TMPDIR)/$(PYSQLITEVERSION)"
	rm -fr "$(TMPDIR)/$(PYTHONNOSEVERSION)"
	rm -fr "$(TMPDIR)/$(PYTHONVERSION)"
	rm -fr "$(TMPDIR)/$(PYZMQVERSION)"
	rm -fr "$(TMPDIR)/$(QIMGTOARRVERSION)"
	rm -fr "$(TMPDIR)/$(QTVERSION)"
	rm -fr "$(TMPDIR)/$(SCIPYVERSION)"
	rm -fr "$(TMPDIR)/$(SIPVERSION)"
	rm -fr "$(TMPDIR)/$(SQLITEVERSION)"
	rm -fr "$(TMPDIR)/$(SWIGVERSION)"
	rm -fr "$(TMPDIR)/$(TIFFVERSION)"
	rm -fr "$(TMPDIR)/$(VIGRAVERSION)"
	rm -fr "$(TMPDIR)/$(YATTAGVERSION)"
	rm -fr "$(TMPDIR)/$(ZLIBVERSION)"
	rm -fr "$(TMPDIR)/AMD"
	rm -fr "$(TMPDIR)/ATLAS"
	rm -fr "$(TMPDIR)/CAMD"
	rm -fr "$(TMPDIR)/CCOLAMD"
	rm -fr "$(TMPDIR)/CHOLMOD"
	rm -fr "$(TMPDIR)/COLAMD"
	rm -fr "$(TMPDIR)/UFconfig"
	rm -fr "$(TMPDIR)/UMFPACK"
	rm -fr "$(TMPDIR)/ilastik-$(ILASTIKVERSION)"
	rm -fr "$(TMPDIR)/jpeg-$(JPEGVERSION)"
	rm -fr "$(TMPDIR)/wxPython-src-$(WXPYTHONVERSION)"
	rm -fr "$(TGTDIR)"

distclean:				clean
	rm -fr "$(TMPDIR)/wxPython-src-$(WXPYTHONVERSION)-$(HOSTTYPE)"



#
# Downloads and fetching of sources
#
$(SRCDIR)/findlibjvm.class:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "https://github.com/CellProfiler/CellProfiler/raw/release_2.1.0/cellprofiler/utilities/findlibjvm.class" && \
	touch "$@"

$(SRCDIR)/$(NUMPYVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	NUMPYVERSIONNR=$$(echo $(NUMPYVERSION)|cut -d'-' -f2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(NUMPYVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(SCIPYVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	SCIPYVERSIONNR=$$(echo $(SCIPYVERSION)|cut -d'-' -f2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(SCIPYVERSION).tar.gz"

$(SRCDIR)/$(UMFPACKVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(UMFPACKVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(CAMDVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(CAMDVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(CCOLAMDVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(CCOLAMDVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(COLAMDVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(COLAMDVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(CHOLMODVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(CHOLMODVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(UFCONFIGVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(UFCONFIGVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(AMDVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(AMDVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYTHONVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	PYTHONVERSIONNR=$$(echo $(PYTHONVERSION)|cut -d'-' -f2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYTHONVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(MATPLOTLIBVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(MATPLOTLIBVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/wxPython-src-$(WXPYTHONVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/wxPython-src-$(WXPYTHONVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(PYOPENGLVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYOPENGLVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYOPENGLACCELVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYOPENGLACCELVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(SIPVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	SIPVERSIONNR=$$(echo $(SIPVERSION)|cut -d'-' -f2|cut -d'.' -f1) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(SIPVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYQTVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYQTVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(QTVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(QTVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(FFTWVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(FFTWVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYPIVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYPIVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(DECORATORVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(DECORATORVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(MYSQLPYTHONVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(MYSQLPYTHONVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYTHONNOSEVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYTHONNOSEVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PILVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PILVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/jpegsrc.v$(JPEGVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/jpegsrc.v$(JPEGVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(ZLIBVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(ZLIBVERSION).tar.bz2" && \
	touch "$@"

#$(SRCDIR)/$(PNGVERSION).tar.bz2:
#	cd "$(SRCDIR)" && \
#	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PNGVERSION).tar.bz2" && \
#	touch "$@"

$(SRCDIR)/$(TIFFVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(TIFFVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(CYTHONVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(CYTHONVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(VIGRAVERSION)-src.tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(VIGRAVERSION)-src.tar.gz" && \
	touch "$@"

$(SRCDIR)/$(QIMGTOARRVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(QIMGTOARRVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(HDF5VERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(HDF5VERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(H5PYVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(H5PYVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYZMQVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYZMQVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(JAVABRIDGEVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(BIOFORMATSVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(PCREVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PCREVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(SWIGVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(SWIGVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/ilastik-v$(ILASTIKVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/ilastik-v$(ILASTIKVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(GTKVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	GTKVERSIONNR=$$(echo $(GTKVERSION)|cut -d'-' -f2|cut -d'.' -f-2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(GTKVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(GLIBVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	GLIBVERSIONNR=$$(echo $(GLIBVERSION)|cut -d'-' -f2|cut -d'.' -f-2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(GLIBVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(PANGOVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	PANGOVERSIONNR=$$(echo $(PANGOVERSION)|cut -d'-' -f2|cut -d'.' -f-2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PANGOVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(CAIROVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(CAIROVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(ATKVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	ATKVERSIONNR=$$(echo $(ATKVERSION)|cut -d'-' -f2|cut -d'.' -f-2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(ATKVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(PIXMANVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PIXMANVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(GDKPIXBUFVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	GDKPIXBUFVERSIONNR=$$(echo $(GDKPIXBUFVERSION)|cut -d'-' -f3|cut -d'.' -f-2) && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(GDKPIXBUFVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(FONTCFGVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(FONTCFGVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(PYSQLITEVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(PYSQLITEVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(SQLITEVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(SQLITEVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(MYSQLVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(MYSQLVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(NCURSESVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(NCURSESVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(BOOSTVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	BOOSTVERSIONNR=$$(echo $(BOOSTVERSION)|cut -d'_' -f2-|perl -pe 's/_/./g') && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(BOOSTVERSION).tar.bz2" && \
	touch "$@"

$(SRCDIR)/$(GETTEXTVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(GETTEXTVERSION).tar.gz" && \
	touch "$@"

$(SRCDIR)/$(CELLH5VERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(CELLH5VERSION).patch:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(SKLEARNVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(PANDASVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(DATEUTILVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(PYTZVERSION).tar.bz2:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(SIXVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(LXMLVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/$(LIBICONVVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"
	
$(SRCDIR)/$(LIBXML2VERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"
	
$(SRCDIR)/$(LIBXSLTVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

$(SRCDIR)/mtrand.pyx.patch:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"
	
$(SRCDIR)/$(YATTAGVERSION).tar.gz:
	cd "$(SRCDIR)" && \
	wget $(WGETFLAGS) "$(PACKAGEHOST)/$(@F)" && \
	touch "$@"

download: $(TMPDIR)/create-dirs $(SRCDIR)/findlibjvm.class $(SRCDIR)/$(NUMPYVERSION).tar.gz $(SRCDIR)/$(SCIPYVERSION).tar.gz $(SRCDIR)/$(UMFPACKVERSION).tar.gz $(SRCDIR)/$(CAMDVERSION).tar.gz $(SRCDIR)/$(CCOLAMDVERSION).tar.gz $(SRCDIR)/$(COLAMDVERSION).tar.gz $(SRCDIR)/$(CHOLMODVERSION).tar.gz $(SRCDIR)/$(UFCONFIGVERSION).tar.gz $(SRCDIR)/$(AMDVERSION).tar.gz $(SRCDIR)/$(PYTHONVERSION).tar.bz2 $(SRCDIR)/$(MATPLOTLIBVERSION).tar.gz $(SRCDIR)/wxPython-src-$(WXPYTHONVERSION).tar.bz2 $(SRCDIR)/$(PYOPENGLVERSION).tar.gz $(SRCDIR)/$(PYOPENGLACCELVERSION).tar.gz $(SRCDIR)/$(SIPVERSION).tar.gz $(SRCDIR)/$(PYQTVERSION).tar.gz $(SRCDIR)/$(QTVERSION).tar.gz $(SRCDIR)/$(FFTWVERSION).tar.gz $(SRCDIR)/$(PYPIVERSION) $(SRCDIR)/$(DECORATORVERSION).tar.gz $(SRCDIR)/$(MYSQLPYTHONVERSION).tar.gz $(SRCDIR)/$(PYTHONNOSEVERSION).tar.gz $(SRCDIR)/$(PILVERSION).tar.gz $(SRCDIR)/jpegsrc.v$(JPEGVERSION).tar.gz $(SRCDIR)/$(ZLIBVERSION).tar.bz2 $(SRCDIR)/$(PNGVERSION).tar.bz2 $(SRCDIR)/$(TIFFVERSION).tar.gz $(SRCDIR)/$(CYTHONVERSION).tar.gz $(SRCDIR)/$(VIGRAVERSION)-src.tar.gz $(SRCDIR)/$(QIMGTOARRVERSION).tar.gz $(SRCDIR)/$(HDF5VERSION).tar.bz2 $(SRCDIR)/$(H5PYVERSION).tar.gz $(SRCDIR)/$(PCREVERSION).tar.bz2 $(SRCDIR)/$(SWIGVERSION).tar.gz $(SRCDIR)/$(ILASTIKVERSION).tar.gz $(SRCDIR)/$(GTKVERSION).tar.bz2 $(SRCDIR)/$(GLIBVERSION).tar.bz2 $(SRCDIR)/$(PANGOVERSION).tar.bz2 $(SRCDIR)/$(CAIROVERSION).tar.gz $(SRCDIR)/$(ATKVERSION).tar.bz2 $(SRCDIR)/$(PIXMANVERSION).tar.gz $(SRCDIR)/$(GDKPIXBUFVERSION).tar.bz2 $(SRCDIR)/$(FONTCFGVERSION).tar.gz $(SRCDIR)/$(PYSQLITEVERSION).tar.gz $(SRCDIR)/$(SQLITEVERSION).tar.gz $(SRCDIR)/$(MYSQLVERSION).tar.gz $(SRCDIR)/$(NCURSESVERSION).tar.gz $(SRCDIR)/$(BOOSTVERSION).tar.bz2 $(SRCDIR)/$(GETTEXTVERSION).tar.gz $(SRCDIR)/(CELLH5VERSION).tar.gz $(SRCDIR)/(CELLH5VERSION).patch $(SRCDIR)/(SKLEARNVERSION).tar.gz $(SRCDIR)/(PANDASVERSION).tar.gz $(SRCDIR)/(PYTZVERSION).tar.bz2 $(SRCDIR)/(SIXVERSION).tar.gz $(SRCDIR)/$(LXMLVERSION).tar.gz $(SRCDIR)/$(DATEUTILVERSION).tar.gz  $(SRCDIR)/mtrand.pyx.patch $(SRCDIR)/$(YATTAGVERSION).tar.gz
